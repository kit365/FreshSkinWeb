package com.kit.maximus.freshskinweb.websocket;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kit.maximus.freshskinweb.service.notification.NotificationService;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.*;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

@Slf4j
@Component
public class NotificationWebSocketHandler extends TextWebSocketHandler {
    @Autowired
    private NotificationService notificationService;

    // L∆∞u danh s√°ch session theo roleId
    private final Map<Long, Set<WebSocketSession>> roleSessions = new ConcurrentHashMap<>();

    // L∆∞u roleId c·ªßa t·ª´ng session. D√πng ƒë·ªÉ bi·∫øt m·ªôt session thu·ªôc v·ªÅ role n√†o.
    private final Map<WebSocketSession, Long> sessionRoles = new ConcurrentHashMap<>();

    @Override
    public void afterConnectionEstablished(@NotNull WebSocketSession session) {
        log.info("üì© K·∫øt n·ªëi WebSocket m·ªõi t·ª´: {}", session.getId());
    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws IOException {
        try {
            Long roleId = Long.parseLong(message.getPayload());

            sessionRoles.put(session, roleId);
            roleSessions.computeIfAbsent(roleId, k -> ConcurrentHashMap.newKeySet()).add(session);

            // üî• G·ª≠i tin nh·∫Øn ch∆∞a ƒë·ªçc ngay sau khi nh·∫≠n roleId t·ª´ FE
            long unreadCount = notificationService.countMessageFeedback(roleId);
            Map<String, Object> result = new ConcurrentHashMap<>();
            result.put("unreadCount", unreadCount);

            ObjectMapper objectMapper = new ObjectMapper();
            session.sendMessage(new TextMessage(objectMapper.writeValueAsString(result)));

        } catch (NumberFormatException e) {
            log.error("‚ùå L·ªói parse roleID t·ª´ WebSocket message: {}", message.getPayload());
        }
    }

    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        Long roleId = sessionRoles.remove(session);
        if (roleId != null) {
            roleSessions.getOrDefault(roleId, ConcurrentHashMap.newKeySet()).remove(session);
        }
        log.info("‚ùå K·∫øt n·ªëi ƒë√≥ng: {}", session.getId());
    }

    // G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ session c√≥ c√πng roleId
    public void sendNotification(String message, long roleId) throws IOException {
        long unreadCount = notificationService.countMessageFeedback(roleId);

        Map<String, Object> result = new ConcurrentHashMap<>();
        result.put("unreadCount", unreadCount);
        result.put("message", message);

        ObjectMapper objectMapper = new ObjectMapper();
        String jsonData = objectMapper.writeValueAsString(result);
        log.info("üì§ JSON g·ª≠i ƒëi: {}", jsonData);

        Set<WebSocketSession> sessions = roleSessions.getOrDefault(roleId, ConcurrentHashMap.newKeySet());
        for (WebSocketSession session : sessions) {
            if (session.isOpen()) {
                try {
                    session.sendMessage(new TextMessage(jsonData));
                    log.info("‚úÖ G·ª≠i th√†nh c√¥ng t·ªõi session: {}", session.getId());
                } catch (IOException e) {
                    log.error("‚ùå L·ªói g·ª≠i th√¥ng b√°o WebSocket: {}", e.getMessage());
                }
            } else {
                log.warn("‚ö†Ô∏è Phi√™n WebSocket {} b·ªã ƒë√≥ng tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn.", session.getId());
            }
        }
    }
}
