package com.kit.maximus.freshskinweb.websocket;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.kit.maximus.freshskinweb.service.notification.NotificationService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;


//nh·∫≠n c√°c th√¥ng b√°od9e63e gui v·ªÅ cho FE qua k√™nh socket ƒë√£ ƒëƒÉng k√Ω /ws/notify
@Slf4j
@Component
public class NotificationWebSocketHandler extends TextWebSocketHandler {

    @Autowired
    private NotificationService notificationService;

    //    d√πng currentmap ƒë·ªÉ tr√°nh l·ªói race condition khi nhi·ªÅu role out session
//    private final Map<String, Set<WebSocketSession>> sessions = new ConcurrentHashMap<>();
    private final Set<WebSocketSession> sessions = new HashSet<>();


//    public NotificationWebSocketHandler() {
//        sessions.put("ADMIN", ConcurrentHashMap.newKeySet()); //t√†i kho·∫£n admin c√≥ th·ªÉ nh·∫≠n ƒëc full th√¥ng b√°o
//        sessions.put("USER", ConcurrentHashMap.newKeySet());  //t√†i kho·∫£n user ch·ªâ nhan th√¥ng b√°o c√π·∫£ user
//        sessions.put("ORDER_MANAGER", ConcurrentHashMap.newKeySet()); //th√¥ng b√°o trang th√°i ƒë∆°n h√†ng
//        sessions.put("PRODUCT_MANAGER", ConcurrentHashMap.newKeySet()); //th√¥ng b√°o trang th√°i ƒë∆°n h√†ng
//    }

    @Override
    protected void handleTextMessage(WebSocketSession session, TextMessage message) throws IOException {
        String payload = message.getPayload();
        System.out.println("üì© Nh·∫≠n tin nh·∫Øn t·ª´ client: " + payload);
    }


    @Override
    public void afterConnectionEstablished(@NotNull WebSocketSession session) throws Exception {
        sessions.add(session);
        System.out.println("üì© K·∫øt n·ªëi WebSocket m·ªõi t·ª´: " + session.getId());

        //ƒë·∫øm th√¥ng b√°o cho feedback, order t√≠nh sau
        long unreadCount = notificationService.countMessageFeedbackIsNotRead();

        Map<String, Object> result = new ConcurrentHashMap<>();
        result.put("unreadCount", unreadCount);
        ObjectMapper objectMapper = new ObjectMapper();

        session.sendMessage(new TextMessage(objectMapper.writeValueAsString(result)));
    }


    //x√≥a session khi ƒë√£ ƒë√≥ng client
    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        sessions.remove(session);
        System.out.println("‚ùå K·∫øt n·ªëi ƒë√≥ng: " + session.getId());
    }

    public void sendNotification(String message) throws IOException {
        long unreadCount = notificationService.countMessageFeedbackIsNotRead();

        Map<String, Object> result = new ConcurrentHashMap<>();
        result.put("unreadCount", unreadCount);
        result.put("message", message);
        ObjectMapper objectMapper = new ObjectMapper();

        String jsonData = objectMapper.writeValueAsString(result);
        System.out.println("üì§ JSON g·ª≠i ƒëi: " + jsonData); // Log d·ªØ li·ªáu g·ª≠i ƒëi

        for (WebSocketSession session : sessions) {
            if (session.isOpen()) {
                try {
                    session.sendMessage(new TextMessage(jsonData));
                    System.out.println("‚úÖ G·ª≠i th√†nh c√¥ng t·ªõi session: " + session.getId());
                } catch (IOException e) {
                    log.error("‚ùå L·ªói g·ª≠i th√¥ng b√°o WebSocket: {}", e.getMessage());
                }
            } else {
                System.out.println("‚ö†Ô∏è Phi√™n WebSocket b·ªã ƒë√≥ng tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn.");
            }
        }
    }

}
